
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { UserPlus, Loader2 } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import { insertStudent, type Student } from "@/utils/studentDatabase";

const StudentEnrollment = () => {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    student_name: "",
    grade: "",
    date_of_birth: "",
    parent_name: "",
    address: "",
    primary_contact: "",
    alternative_contact: "",
    gender: "Male" as "Male" | "Female"
  });

  const grades = [
    "Grade 1", "Grade 2", "Grade 3", "Grade 4", "Grade 5",
    "Grade 6", "Grade 7", "Grade 8", "Grade 9"
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      // Insert student with properly typed data
      const studentData: Omit<Student, 'id' | 'created_at' | 'updated_at'> = {
        registration_number: '', // Will be auto-generated by database trigger
        student_name: formData.student_name,
        grade: formData.grade,
        date_of_birth: formData.date_of_birth,
        parent_name: formData.parent_name,
        address: formData.address || undefined,
        primary_contact: formData.primary_contact,
        alternative_contact: formData.alternative_contact || undefined,
        gender: formData.gender,
        admission_date: new Date().toISOString().split('T')[0] // Today's date
      };

      const result = await insertStudent(studentData);

      toast({
        title: "Student Enrolled Successfully!",
        description: `Registration Number: ${result.registration_number}`,
      });

      // Reset form
      setFormData({
        student_name: "",
        grade: "",
        date_of_birth: "",
        parent_name: "",
        address: "",
        primary_contact: "",
        alternative_contact: "",
        gender: "Male"
      });

    } catch (error) {
      toast({
        title: "Enrollment Failed",
        description: "There was an error enrolling the student. Please try again.",
        variant: "destructive"
      });
      console.error("Error enrolling student:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Student Enrollment</h2>
        <p className="text-gray-600">Enroll new students into the school management system</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <UserPlus className="w-5 h-5" />
            <span>New Student Registration</span>
          </CardTitle>
          <CardDescription>
            Fill in the student details to complete the enrollment process
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="student_name">Student Full Name *</Label>
                <Input
                  id="student_name"
                  placeholder="Enter student's full name"
                  value={formData.student_name}
                  onChange={(e) => handleInputChange('student_name', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="grade">Grade *</Label>
                <Select value={formData.grade} onValueChange={(value) => handleInputChange('grade', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select Grade" />
                  </SelectTrigger>
                  <SelectContent>
                    {grades.map((grade) => (
                      <SelectItem key={grade} value={grade}>
                        {grade}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="date_of_birth">Date of Birth *</Label>
                <Input
                  id="date_of_birth"
                  type="date"
                  value={formData.date_of_birth}
                  onChange={(e) => handleInputChange('date_of_birth', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="gender">Gender *</Label>
                <Select value={formData.gender} onValueChange={(value) => handleInputChange('gender', value as "Male" | "Female")}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Male">Male</SelectItem>
                    <SelectItem value="Female">Female</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="parent_name">Parent/Guardian Name *</Label>
                <Input
                  id="parent_name"
                  placeholder="Enter parent/guardian name"
                  value={formData.parent_name}
                  onChange={(e) => handleInputChange('parent_name', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="primary_contact">Primary Contact *</Label>
                <Input
                  id="primary_contact"
                  placeholder="Enter primary phone number"
                  value={formData.primary_contact}
                  onChange={(e) => handleInputChange('primary_contact', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="alternative_contact">Alternative Contact</Label>
                <Input
                  id="alternative_contact"
                  placeholder="Enter alternative phone number"
                  value={formData.alternative_contact}
                  onChange={(e) => handleInputChange('alternative_contact', e.target.value)}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="address">Address</Label>
              <Textarea
                id="address"
                placeholder="Enter student's address"
                value={formData.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                rows={3}
              />
            </div>

            <Button type="submit" size="lg" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Enrolling Student...
                </>
              ) : (
                <>
                  <UserPlus className="w-4 h-4 mr-2" />
                  Enroll Student
                </>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default StudentEnrollment;


import { supabase } from "@/integrations/supabase/client";

export interface LaboratoryStock {
  id: string;
  tool_name: string;
  description?: string;
  category?: string;
  total_quantity: number;
  available_quantity: number;
  unit_cost?: number;
  created_at: string;
  updated_at: string;
}

export interface LaboratoryClearance {
  id: string;
  tracking_number: string;
  student_id: string;
  tool_id: string;
  damage_type: string;
  quantity?: number;
  compensation_fee: number;
  payment_status: 'pending' | 'paid' | 'waived';
  payment_date?: string;
  payment_mode?: string;
  transaction_code?: string;
  receipt_number?: string;
  notes?: string;
  reported_date: string;
  created_at: string;
  updated_at: string;
  students?: {
    student_name: string;
    registration_number: string;
    grade: string;
  };
  laboratory_stock?: {
    tool_name: string;
    category?: string;
    unit_cost?: number;
  };
}

// Fetch all laboratory stock
export const getLaboratoryStock = async (): Promise<LaboratoryStock[]> => {
  const { data, error } = await supabase
    .from('laboratory_stock')
    .select('*')
    .order('tool_name');

  if (error) {
    console.error('Error fetching laboratory stock:', error);
    throw error;
  }

  return data || [];
};

// Add new tool to laboratory stock
export const addLaboratoryStock = async (tool: Omit<LaboratoryStock, 'id' | 'created_at' | 'updated_at'>) => {
  const { data, error } = await supabase
    .from('laboratory_stock')
    .insert([tool])
    .select()
    .single();

  if (error) {
    console.error('Error adding laboratory stock:', error);
    throw error;
  }

  return data;
};

// Update laboratory stock
export const updateLaboratoryStock = async (id: string, updates: Partial<LaboratoryStock>) => {
  const { data, error } = await supabase
    .from('laboratory_stock')
    .update(updates)
    .eq('id', id)
    .select()
    .single();

  if (error) {
    console.error('Error updating laboratory stock:', error);
    throw error;
  }

  return data;
};

// Delete laboratory stock
export const deleteLaboratoryStock = async (id: string) => {
  const { error } = await supabase
    .from('laboratory_stock')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('Error deleting laboratory stock:', error);
    throw error;
  }
};

// Create laboratory clearance record
export const createLaboratoryClearance = async (clearance: {
  student_id: string;
  tool_id: string;
  damage_type: string;
  quantity?: number;
  compensation_fee: number;
  payment_status?: 'pending' | 'paid' | 'waived';
  payment_date?: string;
  payment_mode?: string;
  transaction_code?: string;
  notes?: string;
}) => {
  const { data, error } = await supabase
    .from('laboratory_clearance')
    .insert([{
      ...clearance,
      tracking_number: '' // Auto-generated by trigger
    }])
    .select()
    .single();

  if (error) {
    console.error('Error creating laboratory clearance:', error);
    throw error;
  }

  return data;
};

// Get all laboratory clearance records with student and tool details
export const getLaboratoryClearances = async (): Promise<LaboratoryClearance[]> => {
  const { data, error } = await supabase
    .from('laboratory_clearance')
    .select(`
      *,
      students (
        student_name,
        registration_number,
        grade
      ),
      laboratory_stock (
        tool_name,
        category,
        unit_cost
      )
    `)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching laboratory clearances:', error);
    throw error;
  }

  return (data || []) as LaboratoryClearance[];
};

// Update laboratory clearance (for payment processing)
export const updateLaboratoryClearance = async (id: string, updates: Partial<LaboratoryClearance>) => {
  const { data, error } = await supabase
    .from('laboratory_clearance')
    .update(updates)
    .eq('id', id)
    .select()
    .single();

  if (error) {
    console.error('Error updating laboratory clearance:', error);
    throw error;
  }

  return data;
};

// Generate receipt number and update clearance record
export const processPayment = async (clearanceId: string, paymentData: {
  payment_mode: string;
  transaction_code?: string;
  payment_date: string;
}) => {
  // Generate receipt number using the database function
  const { data: receiptData, error: receiptError } = await supabase
    .rpc('generate_receipt_number');

  if (receiptError) {
    console.error('Error generating receipt number:', receiptError);
    throw receiptError;
  }

  // Update the clearance record with payment details and receipt number
  const { data, error } = await supabase
    .from('laboratory_clearance')
    .update({
      ...paymentData,
      payment_status: 'paid',
      receipt_number: receiptData
    })
    .eq('id', clearanceId)
    .select()
    .single();

  if (error) {
    console.error('Error processing payment:', error);
    throw error;
  }

  return data;
};

// Get clearances by student
export const getStudentClearances = async (studentId: string): Promise<LaboratoryClearance[]> => {
  const { data, error } = await supabase
    .from('laboratory_clearance')
    .select(`
      *,
      laboratory_stock (
        tool_name,
        category,
        unit_cost
      )
    `)
    .eq('student_id', studentId)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching student clearances:', error);
    throw error;
  }

  return (data || []) as LaboratoryClearance[];
};
